diff --git a/src/fr-archive.c b/src/fr-archive.c
index 163f035..6a8cf89 100644
--- a/src/fr-archive.c
+++ b/src/fr-archive.c
@@ -860,6 +860,71 @@ fr_archive_list (FrArchive           *archive,
 	FR_ARCHIVE_GET_CLASS (archive)->list (archive, password, cancellable, callback, user_data);
 }
 
+int delSchar(char *buf, char *a)
+{
+    int n=0, k=0;
+    for(int i=0; buf[i]!='\0'; i++)
+    {
+       if(buf[i]==a[n])
+       {
+           k = i;
+           while(buf[i]==a[n])
+           {
+               if(a[++n]=='\0')
+               {
+                   for(k; buf[k+n]!='\0'; k++)
+                   {
+                       buf[k] = buf[k+n];
+                   }
+                   buf[k]='\0';
+                   return 1;
+               }
+               i++;
+           }
+           n=0;
+           i--;
+       }
+    }
+    return 0;
+}
+
+void handle_parentheses(char* input)
+{
+    char buf[1024];
+    int len = 0;
+    for(int i=0; input[i] != '\0' ; i++){
+        if(input[i] == ' ')
+        {
+            input[i] = '\\';
+            len = strlen(input);
+            strncpy(buf, input+i+1, len-i);
+            input[i+1] = ' ';
+            input[i+2] = '\0';
+            i++;
+            strcat(input, buf);
+        }
+        if(input[i] == '(')
+        {
+            input[i] = '\\';
+            len = strlen(input);
+            strncpy(buf, input+i+1, len-i);
+            input[i+1] = '(';
+            input[i+2] = '\0';
+            i++;
+            strcat(input, buf);
+        }
+        if(input[i] == ')')
+        {
+            input[i] = '\\';
+            len = strlen(input);
+            strncpy(buf, input+i+1, len-i);
+            input[i+1] = ')';
+            input[i+2] = '\0';
+            i++;
+            strcat(input, buf);
+        }
+    }
+}
 
 gboolean
 fr_archive_operation_finish (FrArchive     *archive,
@@ -889,6 +954,173 @@ fr_archive_operation_finish (FrArchive     *archive,
 		}
 	}
 
+    if (success && (g_simple_async_result_get_source_tag (G_SIMPLE_ASYNC_RESULT (result)) == fr_archive_extract)) {
+        char find[256];
+        FILE *fp1;
+        FILE *fp2;
+        FILE *fp3;
+        char buf1[1024];
+        char buf2[1024]; //to command 'file'
+        char buf3[1024]; //changed(iconv)
+        char buf4[1024]; //changed(iconv) full path
+        char file[1024];
+        char iconv[1024];
+        char origintargetdir[256];
+        char changedir[256];
+        char targetdir[256];
+        int i;
+        int dir;
+        int text;
+        int moved=0;
+        int changed=0;
+
+        memset(buf1, 0, sizeof(buf1));
+        memset(buf2, 0, sizeof(buf2));
+        memset(buf3, 0, sizeof(buf3));
+        memset(buf4, 0, sizeof(buf4));
+        memset(file, 0, sizeof(file));
+        memset(iconv, 0, sizeof(iconv));
+        memset(changedir, 0, sizeof(changedir));
+        memset(find, 0, sizeof(find));
+        memset(targetdir, 0, sizeof(find));
+        memset(origintargetdir, 0, sizeof(origintargetdir));
+        GFile *last_extraction_destination = _g_object_ref (fr_archive_get_last_extraction_destination (archive));
+        sprintf(origintargetdir, "%s", g_file_get_path (last_extraction_destination));
+        sprintf(targetdir, "%s", g_file_get_path (last_extraction_destination));
+        strcat(targetdir, "/.tmpext");
+        for (i = 0; i < archive->files->len; i++) {
+            FileData *fd = g_ptr_array_index (archive->files, i);
+
+            //iconv 'dir' //// 'result' is complete converted dir path
+            gchar *str, *result;
+            gsize len;
+            str = fd->path;
+            len = strlen (str);
+
+            gchar tmp[512];
+            g_strlcpy(tmp, str, len+1);
+            tmp[len]=0;
+            str = g_convert_with_fallback (tmp, len,
+                         "EUC-KR","UTF-8",
+                         NULL, NULL, &len, NULL);
+
+            len = strlen (str);
+            gchar tmp2[512];
+            g_strlcpy(tmp2, str, len+1);
+            tmp2[len]=0;
+            result = g_convert_with_fallback (tmp2, len,
+                         "UTF-8", "ISO-8859-1",
+                         NULL, NULL, &len, NULL);
+
+            //iconv 'file(full_path)' //// 'result_file' is complete converted file full_path
+            gchar *str_file, *result_file;
+            gsize len_file;
+            str_file = fd->full_path;
+            len_file = strlen (str_file);
+
+            gchar tmp_file[512];
+            g_strlcpy(tmp_file, str_file, len_file+1);
+            tmp_file[len_file]=0;
+
+            str_file = g_convert_with_fallback (tmp_file, len_file,
+                         "EUC-KR","UTF-8",
+                         NULL, NULL, &len_file, NULL);
+
+            len_file = strlen (str_file);
+            gchar tmp2_file[512];
+            g_strlcpy(tmp2_file, str_file, len_file+1);
+            tmp2_file[len_file]=0;
+
+            result_file = g_convert_with_fallback (tmp2_file, len_file,
+                         "UTF-8", "ISO-8859-1",
+                         NULL, NULL, &len_file, NULL);
+
+            char moveDestinationDir[1024];
+            sprintf(moveDestinationDir, "%s%s", targetdir, result);
+            char targetFile[1024];
+            sprintf(targetFile, "%s%s", g_file_get_path (last_extraction_destination), result_file);
+            targetFile[strlen(targetFile) - 1]='\0';
+            handle_parentheses(targetFile);
+            char makedir_cp[1024];
+            sprintf(makedir_cp, "mkdir -p %s && mv -f %s %s", moveDestinationDir, targetFile, moveDestinationDir);
+            system(makedir_cp); //mkdir & mv file to tmp-dir
+
+            //Remove emptied dir
+            char existdir[1024];
+            sprintf(existdir, "%s%s", g_file_get_path (last_extraction_destination), result);
+            while(1){
+                char ls[1024];
+                sprintf(ls, "ls -A %s", existdir);
+                char buf[512];
+                FILE *fp = popen(ls, "r");  // Check exist file
+                if(fgets(buf,sizeof(buf), fp)==NULL) { // Moved All file
+                    char rmexistdir[1024];
+                    sprintf(rmexistdir, "rm -rf %s", existdir);
+                    system(rmexistdir);
+                }
+                else
+                    break;
+                existdir[(int)strrchr(existdir, '/')-(int)existdir] = 0;
+            }
+        }
+        sprintf(find, "find %s", targetdir);
+        fp1 = popen(find, "r");
+
+        while (fgets(buf1,1024,fp1)){
+            delSchar(buf1, origintargetdir);
+            handle_parentheses(buf1);
+            changed=0;
+            for(i=0; buf1[i] != 0 ; i++){
+                if (buf1[i] == '\n'){
+                    buf1[i]=0;
+                    break;
+                }
+            }
+            sprintf(iconv, "echo $(echo %s | iconv -c -f UTF-8 -t ISO-8859-1) | iconv -c -f EUC-KR -t UTF-8", buf1);
+
+            sprintf(file, "file %s%s", origintargetdir, buf1);
+            fp2 = popen(file, "r");
+            fgets(buf2, 1024, fp2); // buf2 is check dir
+            for(i=0;buf2[i]!=0;i++)
+                if(buf2[i]=='\n')
+                    buf2[i]=NULL;
+            dir=0;
+            text=0;
+            if(strstr(buf2,"directory"))
+                dir=1;
+            else if(strstr(buf2,"text"))
+                text=1;
+
+            fp3 = popen(iconv, "r");
+            fgets(buf3, 1024, fp3);  //buf3 is dir name or file name .. changed
+            handle_parentheses(buf3);
+            sprintf(buf4, "%s%s", origintargetdir, buf3);
+            for(i=0;buf4[i]!=0;i++)
+                if(buf4[i]=='\n')
+                    buf4[i]=NULL;
+            delSchar(buf4, "/.tmpext");
+            if(dir){
+                sprintf(changedir, "mkdir -p %s ", buf4);
+                system(changedir);
+            }
+            else if(text) {
+                sprintf(iconv,"iconv -c -f EUC-KR -t UTF-8 %s%s > %s", origintargetdir, buf1, buf4);
+                system(iconv);
+            }
+            else {
+                char mv[1024];
+                sprintf(mv, "mv %s%s %s", origintargetdir, buf1, buf4);
+                system(mv);
+            }
+        }
+        char* rm[256];
+        sprintf(rm, "rm -rf %s", targetdir);
+        system(rm);
+        fclose(fp1);
+        fclose(fp2);
+        fclose(fp3);
+    }
+
 	archive->files_to_add_size = 0;
 
 	if (! success && (error != NULL) && g_error_matches (*error, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
diff --git a/src/fr-command-7z.c b/src/fr-command-7z.c
index 617a964..c1891cf 100644
--- a/src/fr-command-7z.c
+++ b/src/fr-command-7z.c
@@ -150,6 +150,50 @@ list__process_line (char     *line,
 	if (strcmp (fields[0], "Path") == 0) {
 		fdata->free_original_path = TRUE;
 		fdata->original_path = g_strdup (fields[1]);
+        char iconv[1024];
+        FILE *fp;
+        char buf[strlen(fdata->original_path)+1];
+        char s1[256];
+        char s2[256];
+        strcpy(s1, fdata->original_path);
+        int len = 0;
+        for(int i=0; s1[i] != '\0' ; i++){
+            if(s1[i] == ' ')
+            {
+                s1[i] = '\\';
+                len = strlen(s1);
+                strncpy(buf, s1+i+1, len-i);
+                s1[i+1] = ' ';
+                s1[i+2] = '\0';
+                i++;
+                strcat(s1, buf);
+            }
+            if(s1[i] == '(')
+            {
+                s1[i] = '\\';
+                len = strlen(s1);
+                strncpy(s2, s1+i+1, len-i);
+                s1[i+1] = '(';
+                s1[i+2] = '\0';
+                i++;
+                strcat(s1, s2);
+            }
+            if(s1[i] == ')')
+            {
+                s1[i] = '\\';
+                len = strlen(s1);
+                strncpy(s2, s1+i+1, len-i);
+                s1[i+1] = ')';
+                s1[i+2] = '\0';
+                i++;
+                strcat(s1, s2);
+            }
+        }
+
+        sprintf(iconv, "echo $(echo %s | iconv -c -f UTF-8 -t ISO-8859-1) | iconv -c -f EUC-KR -t UTF-8", s1);
+        fp = popen(iconv, "r");
+        fgets(buf,sizeof(buf),fp);
+        fdata->original_path = buf;
 		fdata->full_path = g_strconcat ((fdata->original_path[0] != '/') ? "/" : "",
 						fdata->original_path,
 						(fdata->dir && (fdata->original_path[strlen (fdata->original_path) - 1] != '/')) ? "/" : "",
